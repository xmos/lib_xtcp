:orphan:

##########################
an00121: UDP Demo Overview
##########################

|newpage|

************
Introduction
************

*Transmission Control Protocol/Internet Protocol* (TCP/IP) is an
internetworking protocol that allows cross-platform or heterogeneous
networking. It manages the flow of data in packets with headers giving
the source and destination information. It provides a reliable stream
delivery using sequenced acknowledgment and error detection
technique. TCP/IP offers the *User Datagram Protocol* (UDP), a minimal
transport protocol, wherein the packet headers contain just enough
information to forward the datagrams and their error checking. UDP
does not support flow control and acknowledgment.


XMOS TCP/IP (XTCP)
==================

The XMOS TCP/IP component provides a IP/UDP/TCP stack that connects to
the XMOS ethernet component. It enables several clients to connect to
it and send and receive on multiple TCP or UDP connections. The stack
has been designed for a low memory embedded programming environment
and despite its low memory footprint provides a complete stack
including ARP, IPv4, UDP, TCP, DHCP, IPv4LL, ICMP and IGMP
protocols. The library provides two stacks (one based on the open-source uIP
and one based on LWIP) with modifications to work efficiently on the XMOS
architecture and communicate between tasks using xC channels. This application
note is based on the uIP stack provided in the library.


Block diagram
=============

The application firmware organization is shown in Figure 1, see :ref:`networking_xmos_section`.

.. _networking_xmos_section:

.. figure:: images/blk_diag_general.*
   :scale: 75%
   :align: center

   Networking with an XMOS device

***************
The UDP example
***************

The example in this note uses the XMOS TCP/IP library and shows a simple program
that creates connections for data communication
between the XMOS device and a computer in the network using UDP protocol.

To start using the XTCP library, you need to add ``lib_xtcp`` to
your ``Makefile``::

        USED_MODULES = ... lib_xtcp ...

You can then access the XTCP functions in your source code via the xtcp.h header file::

	#include <xtcp.h>


Allocating hardware resources
=============================

The TCP/IP stack connects to the MII task from the Ethernet library
which requires several ports to communicate with the
Ethernet PHY. These ports are declared in the main program file
(``main.xc``). In this demo the ports are set up for the Ethernet
slice connected to the  CIRCLE slot of the sliceKIT:

.. literalinclude:: ../../src/main.xc
   :start-at: port p_phy_rxd
   :end-at: clock phy_txclk

Note that the port ``p_eth_dummy`` does not need to be connected to
external hardware - it is just used internally by the Ethernet
library.

The MDIO Serial Management Interface (SMI) is used to transfer
management information between MAC and PHY. This interface consists of
two signals which are connected to two ports:

.. literalinclude:: ../../src/main.xc
   :start-at: port p_smi_mdio
   :end-at: port p_smi_mdc

|newpage|

IP configuration
================

The IP is configured via a structure passed to the ``xtcp`` task
to suit the network where the XMOS device is
used.

It is initialized to all zeros when DHCP/AutoIP is used.

.. literalinclude:: ../../src/main.xc
   :start-at: static xtcp_ipconfig_t
   :end-at: };

*************************
Application configuration
*************************

The final part of the application setup in ``main.xc`` is a set of defines that
assigns port numbers
to the broadcast and incoming ports and also assigns the broadcast
address.  The size of data buffer is also set. These defines are used
by the application.

.. literalinclude:: ../../src/udp_reflect.xc
   :start-at: // Defines
   :end-at: BROADCAST_MSG

|newpage|

The application main() function
===============================

For the UDP-based application example, the system comprises four tasks running
on three separate logical cores of a xCORE General-Purpose
multicore microcontroller.

The tasks perform the following operations.

   - The MII task which handles MII/Ethernet traffic.

   - The SMI task which drives the Ethernet PHY. This does not run on
     a logical core on its own.

   - The ethernet TCP/IP server.

   - The UDP reflector application running in a single core.

These tasks communicate via the use of xC channels and interface
connections which allow data to  be passed between
application code running on separate logical cores.

Below is the source code for the main function of this application,
which is taken from the source file ``main.xc``

.. literalinclude:: ../../src/main.xc
   :start-at: int main

Looking at this in more detail you can see the following:

  - Four separate tasks are run in parallel within ``par``

  - There is a function call to execute the ethernet XTCP server: ``xtcp_uip()``

  - There is a function to deal with XTCP events based on network
    protocol UDP
    for communication with a computer in the network: ``udp_reflector()``

  - The channels and interfaces to connect the tasks together are
    set up at the beginning of ``main()``

  - The ``xtcp_uip()`` task is connected to the the ``smi`` and ``mii``
    tasks. This is so it can drive the Ethernet PHY.

  - The IP configuration is passed to the function ``xtcp_uip()``. It also
    takes the OTP ports so it can configure the MAC address based on
    reading the OTP memory of the device.

The UDP reflector
=================

The application code for receiving UDP packets of data from a network machine and reflecting it back to the same machine is implemented in the file ``main.xc``. Further, a fixed packet is sent periodically to a broadcast IP address. The code performing these tasks is contained within the function ``udp_reflect()`` which is shown in the following pages:

.. literalinclude:: ../../src/udp_reflect.xc
   :start-at: void udp_reflect
   :end-before: while (1)

In this segment of the code you can see the following.

  - The network connections, broadcast address and the buffers for holding the transmitted and received data are declared

  - The XTCP server is instructed to listen and create new connections on the incoming port.

|newpage|

::

  while (1) {
    select {
      // Respond to an event from the tcp server
      case i_xtcp.packet_ready():
        i_xtcp.get_packet(conn, (char *)rx_buffer, RX_BUFFER_SIZE, data_len);
        switch (conn.event)
          {
            case XTCP_IFUP:
              // Show the IP address of the interface
              xtcp_ipconfig_t ipconfig;
              i_xtcp.get_ipconfig(ipconfig);
              printstr("dhcp: ");
              printip(ipconfig.ipaddr);
              printstr("\n");

              // When the interface goes up, set up the broadcast connection.
              // This connection will persist while the interface is up
              // and is only used for outgoing broadcast messages
              i_xtcp.connect(BROADCAST_PORT,
                             broadcast_addr,
                             XTCP_PROTOCOL_UDP);
             break;
              .................
              (the complete code is given in the Appendix)
              .................
              .................
          }
          break;

    // This is the periodic case, it occurs every BROADCAST_INTERVAL
    // timer ticks
    case tmr when timerafter(time + BROADCAST_INTERVAL) :> void:
      // A broadcast message can be sent if the connection is established
      // and one is not already being sent on that connection
      if (broadcast_connection.id != INIT_VAL && !broadcast_send_flag)  {
        printstr("Sending broadcast message\n");
        broadcast_len = strlen(broadcast_buffer);
        xtcp_init_send(c_xtcp, broadcast_connection);
        broadcast_send_flag = TRUE;
      }
      time += BROADCAST_INTERVAL;
      break;
    }
   }
  }

You can see the following in the rest of the code.

  - The ``while`` loop waits for an XTCP event and performs the appropriate function.

  - The events pertaining to setting up and closing connections, reception of data and the request to send data.

  - Periodical broadcast of a fixed data is done through timer events.


|newpage|

.. _appendix:

*****************************
Appendix: Demo Hardware Setup
*****************************

	#. Connect the xTAG-2 to XP-SKC-L2 sliceKIT through the xTAG-2 adaptor XA-SK-XTAG2.
	#. Connect the xTAG-2 USB connector to the USB connector on your development PC using a USB cable.
	#. Connect the ethernet slice XA-SK-E100 to the ``CIRCLE`` slot of the sliceKIT.
	#. Connect the slice to the PC or to the network switch using an ethernet cable.
	#. Connect the 12V power supply to the sliceKIT.
	#. Switch on the power supply.

The demo code can be modified to run on any development board with an xCORE device and an ethernet connector.
See :ref:`hardware_udp_setup_section`.

.. _hardware_udp_setup_section:

.. figure:: images/marked_hw_setup.*

	XMOS hardware setup for UDP demo

|newpage|

*************************
Launching the demo device
*************************

Once the application source code is imported into the tools you can then build the project
which will generate the binary file required to run the demo application.

Once the application has been built you need to download the application binary
code onto the xCORE General-Purpose sliceKIT. Here you use the tools to load the application
over JTAG onto the xCORE multicore microcontroller.

Then click **Run**.
When the processor has finished booting you will see the following text in the xTIMEcomposer console window::

	dhcp: 172.17.0.115
	New broadcast connection established:1
	Sending broadcast message
	Sent Broadcast
	Sending broadcast message
	Sent Broadcast

The IP address assigned to the XMOS device through DHCP is displayed. The broadcast message sending is repeated periodically.

|newpage|

****************
Host Application
****************

Windows Host
============

On the host machine connected to the same network of the XMOS device,


* Download and run *Hercules terminal* [#]_

* Click on the tab ``UDP``

* Enter the IP address of the XMOS device under ``Module IP``, incoming port number under ``Port`` and broadcast port number under ``Local port``. Click on the ``Listen`` button.

The broadcast message ``XMOS Broadcast`` set in ``main.xc`` is displayed on the ``Received data`` space at regular intervals.

Testing data reception
======================

On the Hercules terminal, type ``Hello World`` under ``Send`` and click on the ``Send`` button. You will see the following text in the xTIMEcomposer console window::

	New connection to listening port:15533
	Got data: 11 bytes
	Responding
	Sent Response
	Closed connection:2

Since the demo code reflects the received data back to the sending machine, you can also see the ``Hello World`` displayed on the ``Received data`` space of the Hercules terminal.

The data reception can also be tested by running the python script ``test_udp.py`` instead of the Hercules terminal on the host machine. The python script is given below.

.. literalinclude:: ../../src/test_udp.py
   :language: python
   :linenos:

.. [#] http://www.hw-group.com/products/hercules/index_en.html

|newpage|

**********
References
**********

* XMOS Tools User Guide: http://www.xmos.com/published/xtimecomposer-user-guide

* XMOS xCORE Programming Guide: http://www.xmos.com/published/xmos-programming-guide

* XMOS TCP/IP stack design guide: https://www.xmos.com/published/xmos-tcpip-stack-design-guide

|newpage|

************************
Full source code listing
************************

Source code for main.xc
=======================

.. literalinclude:: ../../src/main.xc
  :language: c
  :linenos:

|newpage|

Copyright & Disclaimer
======================

|XMOS copyright|

|XMOS disclaimer|

|XMOS trademarks|
